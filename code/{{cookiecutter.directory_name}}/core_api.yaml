AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Core api for tulipan erp services

Parameters:
  Environment:
    Type: String
  AppName:
    Type: String
  AllowedOrigin:
    Type: String
  CoreAppLayer:
    Type: String
  DBClientLayer:
    Type: String
  VPCSecurityGroup:
    Type: AWS::SSM::Parameter::Value<String>
  VPCSubnets:
    Type: AWS::SSM::Parameter::Value<String>

Globals:
  Function:
    Timeout: 5
    MemorySize: 512
    Tracing: Active
    AutoPublishAlias: live
    Runtime: python3.11
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        APP_NAME: !Ref AppName
        LOG_LEVEL: "INFO"
        ALLOWED_ORIGIN: !Ref AllowedOrigin
        POWERTOOLS_METRICS_NAMESPACE: !Ref AppName
    VpcConfig:
      Ipv6AllowedForDualStack: true
      SecurityGroupIds:
        - !Ref VPCSecurityGroup
      SubnetIds: !Split [',', !Ref VPCSubnets]
  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: true
    OpenApiVersion: '2.0'
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowCredentials: true
      AllowOrigin: !Sub "'${AllowedOrigin}'"

Resources:
  APIGWCloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGWAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt APIGWCloudWatchRole.Arn

  ApiCore:
    Type: AWS::Serverless::Api
    DependsOn:
      - ApiGWAccount
    Properties:
      StageName: !Ref Environment
      MethodSettings:
        - DataTraceEnabled: True
          MetricsEnabled: false
          ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO

  CoreApiUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /${Environment}/${AppName}/url/api/core
      Value: !Sub "https://${ApiCore}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"

  LambdaAppCoreRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
            - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs::${AWS::AccountId}:*"
          PolicyName: !Sub ${Environment}-${AppName}-lambdaLogPermission
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:ListSecretVersionIds"
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
          PolicyName: !Sub ${Environment}-${AppName}-lambdaSecretsManagerPermission
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                  - "xray:GetTraceSummaries"
                Resource: "arn:aws:logs:*:*:*"
          PolicyName: !Sub ${Environment}-${AppName}-x-ray-access
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
          PolicyName: !Sub ${Environment}-${AppName}-lambdaSSMPermission
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeInstances"
                  - "ec2:AttachNetworkInterface"
                Resource: "*"
          PolicyName: !Sub ${Environment}-${AppName}-lambdaVpcPermission

  GetMeasureUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/measure_unit/
      ReservedConcurrentExecutions: 25
      Handler: get_all.lambda_handler
      Role: !GetAtt LambdaAppCoreRole.Arn
      Layers:
        - !Ref CoreAppLayer
        - !Ref DBClientLayer
      Environment:
        Variables:
          APP_NAME: !Ref AppName
          ENVIRONMENT: !Ref Environment
          POWERTOOLS_SERVICE_NAME: get-measure-units
      Events:
        GetMeasureUnits:
          Type: Api
          Properties:
            RestApiId: !Ref ApiCore
            Path: /measure_unit
            Method: get

  FindMeasureUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/measure_unit/
      ReservedConcurrentExecutions: 25
      Handler: find.lambda_handler
      Role: !GetAtt LambdaAppCoreRole.Arn
      Layers:
        - !Ref CoreAppLayer
        - !Ref {model_name_snake}
      Environment:
        Variables:
          APP_NAME: !Ref AppName
          ENVIRONMENT: !Ref Environment
          POWERTOOLS_SERVICE_NAME: find-measure-units
      Events:
        GetMeasureUnits:
          Type: Api
          Properties:
            RestApiId: !Ref ApiCore
            Path: /measure_unit/{id}
            Method: get

  StoreMeasureUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/measure_unit/
      ReservedConcurrentExecutions: 25
      Handler: store.lambda_handler
      Role: !GetAtt LambdaAppCoreRole.Arn
      Layers:
        - !Ref CoreAppLayer
        - !Ref {model_name_snake}
      Environment:
        Variables:
          APP_NAME: !Ref AppName
          ENVIRONMENT: !Ref Environment
          POWERTOOLS_SERVICE_NAME: store-measure-units
      Events:
        GetMeasureUnits:
          Type: Api
          Properties:
            RestApiId: !Ref ApiCore
            Path: /measure_unit
            Method: post

  UpdateMeasureUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/measure_unit/
      ReservedConcurrentExecutions: 25
      Handler: update.lambda_handler
      Role: !GetAtt LambdaAppCoreRole.Arn
      Layers:
        - !Ref CoreAppLayer
        - !Ref {model_name_snake}
      Environment:
        Variables:
          APP_NAME: !Ref AppName
          ENVIRONMENT: !Ref Environment
          POWERTOOLS_SERVICE_NAME: update-measure-units
      Events:
        GetMeasureUnits:
          Type: Api
          Properties:
            RestApiId: !Ref ApiCore
            Path: /measure_unit/{id}
            Method: put

  DeleteMeasureUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/measure_unit/
      ReservedConcurrentExecutions: 25
      Handler: delete.lambda_handler
      Role: !GetAtt LambdaAppCoreRole.Arn
      Layers:
        - !Ref CoreAppLayer
        - !Ref {model_name_snake}
      Environment:
        Variables:
          APP_NAME: !Ref AppName
          ENVIRONMENT: !Ref Environment
          POWERTOOLS_SERVICE_NAME: delete-measure-units
      Events:
        GetMeasureUnits:
          Type: Api
          Properties:
            RestApiId: !Ref ApiCore
            Path: /measure_unit/{id}
            Method: delete

Outputs:
  CoreApi:
    Description: "API Gateway endpoint URL for stage for App Core Service"
    Value: !Ref ApiCore